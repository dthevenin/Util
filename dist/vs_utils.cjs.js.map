{"version":3,"file":"vs_utils.cjs.js","sources":["../src/utils/helpers.ts","../src/utils/is.ts","../src/utils/string.ts","../src/utils/array.ts","../src/utils/file.ts","../src/utils/index.ts"],"sourcesContent":["export const NULL_TYPE = 'Null';\n\nexport const UNDEFINED_TYPE = 'Undefined';\n\nexport const BOOLEAN_TYPE = 'Boolean';\n\nexport const NUMBER_TYPE = 'Number';\n\nexport const STRING_TYPE = 'String';\n\nexport const OBJECT_TYPE = 'Object';\n\nexport const BOOLEAN_CLASS = '[object Boolean]';\n\nexport const NUMBER_CLASS = '[object Number]';\n\nexport const STRING_CLASS = '[object String]';\n\nexport const ARRAY_CLASS = '[object Array]';\n\nexport const OBJECT_CLASS = '[object Object]';\n\n\nconst _toString = Object.prototype.toString;\n\n/**\n * @private\n */\nexport function clone(object: any): any {\n  switch (object) {\n    case null: return null;\n    case undefined: return undefined;\n  }\n\n  if (object.clone) return object.clone ();\n\n  switch (_toString.call (object)) {\n    case OBJECT_CLASS:\n    case OBJECT_TYPE:\n      const objectResult: Record<string, any> = {};\n      for (const {key, value} of object) {\n        objectResult[key] = clone(value);\n      }\n      return objectResult;\n\n    case ARRAY_CLASS: // should not occur because of Array.clone\n      const arrayResult: Array<any> = [];\n      for (var i = 0; i < object.length; i++)\n      {\n        arrayResult[i] = clone (object [i]);\n      }\n      return arrayResult;\n\n    case BOOLEAN_TYPE:\n    case NUMBER_TYPE:\n    case STRING_TYPE:\n    case BOOLEAN_CLASS:\n    case NUMBER_CLASS:\n    case STRING_CLASS:\n    default:\n      return object;\n  }\n}\n\n/**\n *  Returns a JSON string.\n *\n * @param {Object} value The object to be serialized.\n **/\nexport function toJSON (value: any): string {\n  return JSON.stringify (value);\n}\n\n/**\n * Free a ViniSketch object\n *\n * @param {Object} obj the object to free\n */\nexport function free(obj: any): void {\n  if (!obj) { return; }\n  if (obj._free) { obj._free (); }\n  if (obj.destructor) { obj.destructor (); }\n}\n","import { STRING_CLASS } from './helpers';\n\n/********************************************************************\n Testing methods\n *********************************************************************/\n\n/**\n * @private\n **/\nconst _toString = Object.prototype.toString;\n\n/**\n *  Returns `true` if `object` is a DOM node of type 1; `false` otherwise.\n *\n *  @example\n *\n *  vs.helper.isElement(new Element('div'));\n *  //-> true\n *\n *  vs.helper.isElement(document.createElement('div'));\n *  //-> true\n *\n *  vs.helper.isElement(document.createTextNode('foo'));\n *  //-> false\n *\n *\n * @param {Object} object The object to test.\n **/\nexport const isElement = (object: any): object is HTMLElement => object?.nodeType === 1;\n\n/**\n *  Returns `true` if `object` is an [[Array]]; `false` otherwise.\n *\n *  @example\n *\n *  vs.helper.isArray([]);\n *  //-> true\n *\n *  vs.helper.isArray({ });\n *  //-> false\n *\n *\n * @param {Object} object The object to test.\n **/\nexport const isArray = Array.isArray;\n\n/**\n *  Returns `true` if `object` is a Function; `false` otherwise.\n *\n *\n * @param {Object} object The object to test.\n **/\nexport const isFunction = (object: unknown): object is Function => typeof object === \"function\";\n\n/**\n *  Returns `true` if `object` is an String; `false` otherwise.\n *\n *  @example\n *\n *  vs.helper.isString (\"qwe\");\n *  //-> true\n *\n *  vs.helper.isString (123);\n *  //-> false\n *\n *\n * @param {Object} object The object to test.\n **/\nexport const isString = (object: unknown): object is string => _toString.call (object) === STRING_CLASS;\n\n/**\n *  Returns `true` if `object` is an Number; `false` otherwise.\n *\n *  @example\n *\n *  vs.helper.isNumber (123);\n *  //-> true\n *\n *  vs.helper.isNumber (1.23);\n *  //-> true\n *\n *  vs.helper.isNumber (\"123\");\n *  //-> false\n *\n *\n * @param {Object} object The object to test.\n **/\nexport const isNumber = (object: unknown): object is number =>\n  (typeof object === 'number' && isFinite(object)) || object instanceof Number;\n\n/**\n *  Returns `true` if `object` is an \"pure\" Object; `false` otherwise.\n *\n *  @example\n *  vs.helper.isObject (123);\n *  //-> false\n *  vs.helper.isObject ([]);\n *  //-> false\n *  vs.helper.isObject ({});\n *  //-> true\n *  vs.helper.isObject (document);\n *  //-> false // YEP !\n *  vs.helper.isObject (vs.helper);\n *  //-> true\n *  vs.helper.isObject (new Date);\n *  //-> false // YEP !\n *\n * @param {Object} object The object to test.\n **/\nexport function isObject(object: unknown): object is Record<string, any> {\n  try {\n    return (Object.getPrototypeOf (object) === Object.prototype);\n} catch (e) {\n  return false;\n}\n}\n\n/**\n *  Returns `true` if `object` is of type `undefined`; `false` otherwise.\n *\n *  @example\n *\n *  vs.helper.isUndefined ();\n *  //-> true\n *\n *  vs.helper.isUndefined (undefined);\n *  //-> true\n *\n *  vs.helper.isUndefined (null);\n *  //-> false\n *\n *  vs.helper.isUndefined (0);\n *  //-> false\n *\n *\n * @param {Object} object The object to test.\n **/\nexport const isUndefined = (object: unknown): object is undefined => typeof object === \"undefined\";\n\n/**\n *  Returns `true` if `object` is a Date; `false` otherwise.\n *\n * * @param {Object} object The object to test.\n *  **/\nexport const isDate = (object: unknown): object is Date => object instanceof Date;\n","import {isString, isArray, isDate, isObject} from './is';\n\n/********************************************************************\n String manipulation\n *********************************************************************/\n\nconst __date_reg_exp = /\\/Date\\((-?\\d+)\\)\\//;\n\n/**\n * HTML-encodes a string and returns the encoded string.\n *\n * @param {String} str String The string\n */\nexport const htmlEncode = (str: string): string => str.replace (/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n\n/**\n *  Strips all leading and trailing whitespace from a string.\n *\n * @param {String} str String The string\n */\nexport const strip = (str: string): string => str.replace(/^\\s+/, '').replace(/\\s+$/, '');\n\n/**\n *  Converts a string separated by dashes into a camelCase equivalent\n *\n * @param {String} str String The string\n * @return {String} the result\n */\nexport function camelize(str: string): string {\n  var parts = str.split ('-'), len = parts.length;\n  if (len === 1) { return parts [0]; }\n\n  var camelized = str.charAt (0) === '-'\n    ? parts [0].charAt (0).toUpperCase () + parts [0].substring (1)\n    : parts [0];\n\n  for (var i = 1; i < len; i++)\n    camelized += parts[i].charAt (0).toUpperCase() + parts[i].substring (1);\n\n  return camelized;\n}\n\n/**\n *  Converts a string separated by dashes into a camelCase equivalent\n *\n * @param {String} str String The string\n * @return {String} the result\n */\nexport const capitalize =(str: string): string => str.charAt(0).toUpperCase() + str.substring(1).toLowerCase();\n\n/**\n *  Converts a caramelized string into a series of words separated by an\n *  underscore (_).\n *\n * @param {String} str String The string\n * @return {String} the result\n */\nexport const underscore = (str: string): string => str.replace (/::/g, '/')\n  .replace (/([A-Z]+)([A-Z][a-z])/g, '$1_$2')\n  .replace (/([a-z\\d])([A-Z])/g, '$1_$2')\n  .replace (/-/g, '_')\n  .toLowerCase ();\n\n/**\n *  Parse a json string. <p/>\n *  This function use the JSON.parse function and manages also\n *  Date parsing which is not supported by the JSON.parse\n *  @ignore\n *\n * @param {String} json String The string\n * @return {Object} the result\n */\nexport function parseJSON (json: string): any {\n  if (!json) return null;\n  var temp = JSON.parse (json);\n\n  if (!__date_reg_exp.test (json)) return temp;\n\n  function manageDate (obj: unknown) {\n    if (isString (obj)) {\n      const result = __date_reg_exp.exec (obj);\n      if (result && result [1]) { // JSON Date -> Date generation\n        obj = new Date (parseInt (result [1]));\n      }\n    }\n    else if (isArray (obj)) {\n      for (var i = 0; i < obj.length; i++) { obj [i] = manageDate (obj [i]); }\n    }\n    else if (isDate(obj)) { return obj; }\n    else if (isObject(obj)) {\n      for (var key in obj) {\n        obj [key] = manageDate (obj [key]); }\n    }\n    return obj;\n  }\n  return manageDate (temp);\n}\n","type ArrayT = Array<any> | Float32Array | number;\n\nexport function arrayDeepClone<T extends ArrayT>(data: T): T {\n  let result:ArrayT;\n\n  if (data instanceof window.Float32Array) {\n    result = new Float32Array (data.length);\n    result.set(data);\n  }  else if (data instanceof Array) {\n    const len = data.length\n    result = new Array (len);\n\n    for (let i = 0; i < len; i++) {\n      result [i] = arrayDeepClone(data [i]);\n    }\n  } else result = data;\n\n  return result as T;\n}\n\nexport function arrayRemove<T>(array: Array<T>, entry: T): Array<T> {\n  const idx = array?.indexOf(entry);\n  if (idx >= -1) {\n    array.splice(idx, 1);\n  }\n  return array;\n}\n","import { isFunction } from './is';\n\n/**\n * Imports a JavaScript or css file into a document\n *\n * @param {String} path The file path to import\n * @param {String} type The file type ['js', 'css']\n * @param {Function} clb A function which will be called when the file is loaded\n * @param {Document} doc The document into import the file\n * @param first insert first. Optional, by default insert at the end\n */\nexport function importFile (path: string, type: 'js' | 'css', clb: (path: string) => void = undefined, doc = document, first = false) {\n  if (type === 'js') {\n    const jsEffects = doc.createElement ('script');\n    jsEffects.setAttribute ('type', 'text/javascript');\n    jsEffects.setAttribute ('src', path);\n    if (isFunction(clb)) {\n      jsEffects.onload = () => clb.call (this, path);\n    }\n\n    const head = doc.head ?? doc.querySelector('head');\n    if (first && doc.head.firstElementChild) {\n      head.insertBefore (jsEffects, head.firstElementChild);\n    }\n    else {\n      head.appendChild(jsEffects);\n    }\n  } else { // CSS\n    const cssStyle = doc.createElement('link');\n    cssStyle.setAttribute('rel', 'stylesheet');\n    cssStyle.setAttribute('type', 'text/css');\n    cssStyle.setAttribute('href', path);\n    cssStyle.setAttribute('media', 'screen');\n    if (isFunction(clb)) {\n      var count = 0;\n\n      (function() {\n        if (!cssStyle.sheet) {\n          if (count++ < 100) {\n            setTimeout(arguments.callee, 100);\n          } else {\n            console.error ('CSS load of ' + path + ' failed!');\n          }\n          return;\n        }\n        clb.call(document, path);\n      })();\n    }\n\n    const head = doc.head ?? doc.querySelector('head');\n    if (first && doc.head.firstElementChild) {\n      head.insertBefore (cssStyle, head.firstElementChild);\n    }\n    else {\n      head.appendChild (cssStyle);\n    }\n  }\n}\n","export * from './is';\nexport * from './matrix';\nexport * from './string';\nexport * from './point';\nexport * from './dimension';\nexport * from './array';\nexport * from './file';\nexport * from './types';\n// export * from './di_container';\n\nexport const isPowerOfTwo = (x: number): boolean => (x !== 0) && ((x & (x - 1)) === 0);\n"],"names":[],"mappings":"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"}